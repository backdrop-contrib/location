<?php
/**
 * $Id$
 * @file location.install
 * Install and uninstall all required databases.
 * Also do incremental database updates.
 */

/**
 * Implentation of hook_install().
 */
function location_install() {
  $table_config = '';
  $serial = 'SERIAL';

  // Check if its using MySQL
  if ($GLOBALS['db_type'] == 'mysql' or $GLOBALS['db_type'] == 'mysqli') {
    $table_config = ' /*!40100 DEFAULT CHARACTER SET utf8 */';
    $serial = 'INT AUTO_INCREMENT';
  }

  db_query("CREATE TABLE {location} (
    lid         serial,
    eid         INTEGER       DEFAULT 0 CHECK (eid >= 0),
    type        VARCHAR(6)    DEFAULT '',
    name        VARCHAR(255),
    street      VARCHAR(255),
    additional  VARCHAR(255),
    city        VARCHAR(255),
    province    VARCHAR(16),
    postal_code VARCHAR(16),
    country     CHAR(2),
    latitude    DECIMAL(10,6),
    longitude   DECIMAL(10,6),
    source      SMALLINT      DEFAULT 0,
    is_primary  SMALLINT      DEFAULT 0,
    PRIMARY KEY (lid)
  )". $table_config);

  db_query("CREATE TABLE {zipcodes} (
    zip         VARCHAR(16)   DEFAULT 0,
    city        VARCHAR(30)   DEFAULT '',
    state       VARCHAR(30)   DEFAULT '',
    latitude    DECIMAL(10,6) DEFAULT 0.000000,
    longitude   DECIMAL(10,6) DEFAULT 0.000000,
    timezone    SMALLINT      DEFAULT 0,
    dst         SMALLINT      DEFAULT 0,
    country     CHAR(2)       DEFAULT '',
    PRIMARY KEY (country, zip)
  )". $table_config);
  db_query("CREATE INDEX {zipcodes}_zip_idx       ON {zipcodes} (zip)");
  db_query("CREATE INDEX {zipcodes}_latitude_idx  ON {zipcodes} (latitude)");
  db_query("CREATE INDEX {zipcodes}_longitude_idx ON {zipcodes} (longitude)");
  db_query("CREATE INDEX {zipcodes}_country_idx   ON {zipcodes} (country)");
}

/**
 * Implentation of hook_uninstall().
 */
function location_uninstall() {
  // delete tables
  if (db_table_exists('location')) {
    db_query('DROP TABLE {location}');
  }
  if (db_table_exists('zipcodes')) {
    db_query('DROP TABLE {zipcodes}');
  }
}

/**
 * Implentation of hook_upgrade().
 */
function location_update_1() {
  return _system_update_utf8(array('location', 'zipcodes'));
}

/**
 * Implentation of hook_upgrade().
 */
function location_update_2() {
  $configured_countries = variable_get('location_configured_countries', array());
  if ($configured_countries['us']) {
    $configured_countries['us'] = 'us';
    variable_set('location_configured_countries', $configured_countries);
  }
}

/**
 * Implentation of hook_upgrade().
 */
function location_update_3() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {location} CHANGE oid eid int unsigned NOT NULL default '0'");
      break;
  }

  drupal_set_message("The schema for location module has been updated.  The update is such that you may want to re-resave any views you have that may include locations.");

  views_invalidate_cache();

  return $ret;
}

/***************************************************************
  PostgreSQL must be supported in all updates after this comment
 ***************************************************************/

/**
 * Implentation of hook_upgrade().
 */
function location_update_4() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {location} ADD COLUMN lid int(10) unsigned NOT NULL default '0' AFTER eid");

      $result = db_query("SELECT eid, type FROM {location}");
      $next_id = 0;
      while ($row = db_fetch_object($result)) {
        $next_id++;
        db_query("UPDATE {location} SET lid = %d WHERE eid = %d AND type = '%s'", $next_id, $row->eid, $row->type);
      }

      $ret[] = update_sql("ALTER TABLE {location} DROP PRIMARY KEY");
      $ret[] = update_sql("ALTER TABLE {location} ADD PRIMARY KEY (lid)");

      db_query("INSERT INTO {sequences} (name, id) VALUES ('{location}_lid', %d)", $next_id);
      $ret[] = update_sql("ALTER TABLE {location} ADD COLUMN is_primary tinyint NOT NULL default '0'");
      $ret[] = update_sql("UPDATE {location} SET is_primary = 1 WHERE type = 'user'");

      break;
    case 'pgsql':
      // help me
      break;
  }

  foreach (node_get_types() as $type => $name) {
    $new_setting = variable_get('location_'. $type, 0) ? 1 : 0;
    variable_del('location_'. $type);
    variable_set('location_maxnum_'. $type, $new_setting);
    variable_set('location_defaultnum_'. $type, $new_setting);
  }

  return $ret;
}

/**
 * Implentation of hook_upgrade().
 *
 * Poor PostgreSQL
 * I forgot all about you in the previous update
 */
function location_update_5() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'pgsql':
      $ret[] = update_sql("ALTER TABLE {location} DROP CONSTRAINT {location}_pkey");
      $ret[] = update_sql("ALTER TABLE {location} RENAME TO {location}_old");
      $ret[] = update_sql("CREATE TABLE {location} (
        lid serial CHECK (lid >= 0),
        eid int NOT NULL default '0' CHECK (eid >= 0),
        type varchar(6) NOT NULL default '',
        name varchar(255) default NULL,
        street varchar(255) default NULL,
        additional varchar(255) default NULL,
        city varchar(255) default NULL,
        province varchar(16) default NULL,
        postal_code varchar(16) default NULL,
        country char(2) default NULL,
        latitude decimal(10,6) default NULL,
        longitude decimal(10,6) default NULL,
        source smallint default '0',
        is_primary smallint default '0',
        PRIMARY KEY (lid)
      )");
      $ret[] = update_sql("INSERT INTO {location}
        (eid, type, name, street, additional, city, province, postal_code, country, latitude,
        longitude, source) SELECT eid, type, name, street, additional, city, province,
        postal_code, country, latitude, longitude, source FROM {location}_old");
      $ret[] = update_sql("DROP TABLE {location}_old");

      $ret[] = update_sql("UPDATE {location} SET is_primary = 1 WHERE type = 'user'");

      break;
  }

  return $ret;
}

/**
 * Implentation of hook_upgrade().
 */
function location_update_6() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("UPDATE {location} SET country = 'se' WHERE country = 'sw'");

      break;
    case 'pgsql':
      $ret[] = update_sql("UPDATE {location} SET country = 'se' WHERE country = 'sw'");

      break;
  }

  return $ret;
}

/**
 * Implentation of hook_upgrade().
 */
function location_update_7() {
  $ret = array();

  $services = array('google');
  $general_geocoders_in_use = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $result = db_query('SELECT * FROM {variable} WHERE name REGEXP \'^location_geocode_[a-z][a-z]$\'');

      while ($row = db_fetch_object($result)) {
        $value_decoded = unserialize($row->value);
        if (!in_array($value_decoded, $services)) {
          $ret[] = update_sql('UPDATE {variable} SET value = \''. serialize($value_decoded .'|'. substr($row->name, 17)) .'\' WHERE name = \''. $row->name .'\'');
        }
        else {
          $general_geocoders_in_use[$value_decoded] = $value_decoded;
        }
      }

      $key = db_result(db_query('SELECT value FROM {variable} WHERE name REGEXP \'^location_geocode_[a-z][a-z]_google_apikey$\' LIMIT 1'));

      $ret[] = update_sql('DELETE FROM {variable} WHERE name REGEXP \'^location_geocode_[a-z][a-z]_google_apikey$\'');

      $ret[] = update_sql('INSERT INTO {variable} (name, value) VALUES (\'location_geocode_google_apikey\', \''. $key .'\')');

      $ret[] = update_sql('DELETE FROM {cache} WHERE cid = \'variables\'');

      variable_set('location_general_geocoders_in_use', $general_geocoders_in_use);

      break;
    case 'pgsql':
      $result = db_query('SELECT * FROM {variable} WHERE name REGEXP \'^location_geocode_[a-z][a-z]$\'');

      while ($row = db_fetch_object($result)) {
        $value_decoded = unserialize($row->value);
        if (!in_array($value_decoded, $services)) {
          $ret[] = update_sql('UPDATE {variable} SET value = \''. serialize($value_decoded .'|'. substr($row->name, 17)) .'\' WHERE name = \''. $row->name .'\'');
        }
        else {
          $general_geocoders_in_use[$value_decoded] = $value_decoded;
        }
      }

      $key = db_result(db_query('SELECT value FROM {variable} WHERE name REGEXP \'^location_geocode_[a-z][a-z]_google_apikey$\' LIMIT 1'));

      $ret[] = update_sql('DELETE FROM {variable} WHERE name REGEXP \'^location_geocode_[a-z][a-z]_google_apikey$\'');

      $ret[] = update_sql('INSERT INTO {variable} (name, value) VALUES (\'location_geocode_google_apikey\', \''. $key .'\')');

      $ret[] = update_sql('DELETE FROM {cache} WHERE cid = \'variables\'');

      variable_set('location_general_geocoders_in_use', $general_geocoders_in_use);

      break;
  }

  return $ret;

}