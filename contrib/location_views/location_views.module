<?php
// $Id$
/**
 * @file
 * Views-enables the location module.
 *
 */

/**
 * Implementation of hook_help().
 */
function location_views_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Views-enables the location fields and creates a default location view. Requires the location module and the views module.');
    case 'admin/help#location_views':
      return t('The Location Views module makes all the location fields available to the Views module, ' .
        'and creates a default location view using all the location fields. Set up the default location view by going to <a href="'. base_path() . 'admin/views">'. base_path() . 'admin/views</a>. ');
  }
}


function location_views_form_alter($form_id, &$form) {

  /**
   * hunmonk's module dependency check: see http://drupal.org/node/54463
   */
  if ($form_id == 'system_modules' && !$_POST) {
    location_views_system_module_validate($form);
  }
  return _location_views_proximity_form_alter($form_id, $form);

}

/**
 * hunmonk's module dependency check: see http://drupal.org/node/54463
 */
function location_views_system_module_validate(&$form) {
  $module = 'location_views';
  $dependencies = array('views', 'location');
  foreach ($dependencies as $dependency) {
      if (!in_array($dependency, $form['status']['#default_value'])) {
        $missing_dependency = TRUE;
        $missing_dependency_list[] = $dependency;
      }
  }
  if (in_array($module, $form['status']['#default_value']) && isset($missing_dependency)) {
    db_query("UPDATE {system} SET status = 0 WHERE type = 'module' AND name = '%s'", $module);
    $key = array_search($module, $form['status']['#default_value']);
    unset($form['status']['#default_value'][$key]);
    drupal_set_message(t('The module %module was deactivated--it requires the following disabled/non-existant modules to function properly: %dependencies', array('%module' => $module, '%dependencies' => implode(', ', $missing_dependency_list))), 'error');
  }
}


/**
 * For operation with the views.module.
 */
function location_views_tables() {
  
  $form = _location_province_select_options();
  $provinces = $form['#options'];
  
  $tables['location'] = array(
    'name' => 'location', 
    'join' => array(
      'left' => array(
        'table' => 'node',
        'field' => 'vid'
      ), 
      'right' => array(
        'field' => 'oid'
      ), 
    ),
    'fields' => array(
      'name'        => array('name' => t('Location: Name'),        'sortable' => true),
      'street'      => array('name' => t('Location: Street'),      'sortable' => true),
      'additional'  => array('name' => t('Location: Additional'),  'sortable' => true),
      'city'        => array('name' => t('Location: City'),        'sortable' => true),
      'province'    => array('name' => t('Location: Province'),    'sortable' => true),
      'postal_code' => array('name' => t('Location: Postal Code'), 'sortable' => true),
      'country'     => array('name' => t('Location: Country'),     'sortable' => true),
      'latitude'    => array('name' => t('Location: Latitude'),    'sortable' => true),
      'longitude'   => array('name' => t('Location: Longitude'),   'sortable' => true),
    ),
    'sorts' => array(
      'name'        => array('name' => t('Location: Name')),
      'street'      => array('name' => t('Location: Street')),
      'additional'  => array('name' => t('Location: Additional')),
      'city'        => array('name' => t('Location: City')),
      'province'    => array('name' => t('Location: Province')),
      'country'     => array('name' => t('Location: Country')),
      'postal_code' => array('name' => t('Location: Postal Code')),
    ),
    'filters' => array(
      'name' => array(
        'field' => 'name',
        'name' => t('Location: Name'),
        'operator' => 'views_handler_operator_like',
        'handler' => 'views_handler_filter_like',
      ),
      'additional' => array(
        'field' => 'additional',
        'name' => t('Location: Additional'),
        'operator' => 'views_handler_operator_like',
        'handler' => 'views_handler_filter_like',
      ),
      'street' => array(
        'field' => 'street',
        'name' => t('Location: Street'),
        'operator' => 'views_handler_operator_like',
        'handler' => 'views_handler_filter_like',
      ),
      'city' => array(
        'field' => 'city',
        'name' => t('Location: City'),
        'operator' => 'views_handler_operator_like',
        'handler' => 'views_handler_filter_like',
      ),
    )
  );

  // use a select box for countries where there is more than a blank and NOT LISTED value
  // use a text input box for all others and where some selected countries have no select option
  if (sizeof($provinces) > 2 && sizeof($missing) == 0) {
    $tables['location']['filters']['province'] = array(
      'field' => 'province',
      'name' => t('Location: Province'),
      'operator' => 'location_handler_operator_eq',
      'handler' => 'location_handler_filter_eq',
      'list' => $provinces,
      'list-type' => 'select',
      );
  } else {
    $tables['location']['filters']['province'] = array(
      'field' => 'province',
      'name' => t('Location: Province'),
      'operator' => 'views_handler_operator_like',
      'handler' => 'views_handler_filter_like',
      );
  }

  $tables['location']['filters']['postal_code'] = array(
    'field' => 'postal_code',
    'name' => t('Location: Postal Code'),
    'operator' => 'views_handler_operator_like',
    'handler' => 'views_handler_filter_like',
  );
  $tables['location']['filters']['country'] = array(
    'field' => 'country',
    'name' => t('Location: Country'),
    'operator' => 'location_handler_operator_eq',
    'handler' => 'location_handler_filter_eq',
    'list' => location_views_countries(),
    'list-type' => 'select',
  );
  
  // add a complete address in a single box as a field option
  $tables['location']['fields']['address'] = array(
    'name'      => t('Location: Address'),
    'handler'   => 'location_views_field_handler_address',
    'notafield' => true,
    'sortable'  => false,
    'addlfields'=> array('name', 'street', 'additional', 'city', 'province', 'country', 'postal_code'),
    'help' => t('Complete formatted address in a single cell, using the location theme.'),
    );

  $tables['location']['filters']['proximity'] = array(
    'field' => 'distance',
    'name' => t('Location: Proximity'),
    'operator' => location_views_proximity_units(),
    'option' => 'string',
    'handler' => 'location_views_filter_handler_proximity',
    'value' => location_views_code_input_form(),
    'help' => t('Create a proximity filter to find nodes within the selected range from a selected postal code. Input the default postal code into the value field and the default range into the option field. Add a Location:Country filter to set the country. Expose this filter to allow the user to change the postal code or proximity range at runtime.'),
    'cacheable' => 'no',
    );

  if (module_exist('gmap')) {
    $tables['location']['filters']['proximity_map'] = array(
    'field' => 'distance',
    'name' => t('Location: Proximity Map'),
    'operator' => location_views_proximity_units(),
    'option' => 'string',
    'handler' => 'location_views_filter_handler_proximity',
    'value' => location_views_map_input_form(),
    'help' => t('Create a GMap proximity filter to find nodes within the selected range from the map center point. Input a GMap macro into the value field, or leave the value blank to set map default to the user location. Put number of units for default range into the option field. Expose this filter to allow the user to change the map centerpoint or proximity range at runtime.'),
    'cacheable' => 'no',
    );
  }

  // add field showing distance from selected location
  $tables['location']['fields']['distance'] = array(
    'name'      => t('Location: Distance'),
    'handler'   => 'location_views_field_handler_distance',
    'notafield' => true,
    'sortable'  => false,
    'addlfields'=> array('name', 'street', 'additional', 'city', 'province', 'country', 'postal_code', 'longitude', 'latitude'),
    'help' => t('Combine with proximity filter. Displays distance from each node to the central location selected with the proximity filter.'),
    );

  return $tables;
}

/**
 *  Create default location view
 */
function location_views_default_views() {
  
  // find all location-enabled nodes
  foreach (node_get_types() as $type => $name) {
    if (variable_get('location_'. $type, 0)) {
      $location_node_types[] = $type;
    }
  }
    
  $view = new stdClass();
  $view->name = 'location_table';
  $view->description = 'User-selectable table of locations.';
  $view->disabled = TRUE;
  $view->access = array (
    );
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'location/views';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '10';
  $view->menu = TRUE;
  $view->menu_title = 'location table';
  $view->menu_tab = FALSE;
  $view->menu_tab_default = FALSE;
  $view->menu_weight = '';
  $view->sort = array (
  );
  $view->argument = array (
  );
  $view->field = array (
    array (
      'tablename' => 'node',
      'field' => 'title',
      'label' => 'Title:',
      'handler' => 'views_handler_field_nodelink',
      'sortable' => '1',
      'defaultsort' => 'ASC',
    ),
    array (
      'tablename' => 'location',
      'field' => 'name',
      'label' => 'Name:',
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'street',
      'label' => 'Street:',
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'additional',
      'label' => 'Additional:',
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'city',
      'label' => 'City:',
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'province',
      'label' => 'Province:',
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'postal_code',
      'label' => 'Postal Code:',
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'country',
      'label' => 'Country:',
      'sortable' => '1',
    ),
  );
  $view->filter = array (
    array (
      'tablename' => 'node',
      'field' => 'status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
    ),
    array (
      'tablename' => 'node',
      'field' => 'type',
      'operator' => 'OR',
      'options' => '',
      'value' => $location_node_types,
    ),
    array (
      'tablename' => 'location',
      'field' => 'name',
      'operator' => '',
      'options' => '',
      'value' => '',
    ),
    array (
      'tablename' => 'location',
      'field' => 'additional',
      'operator' => '',
      'options' => '',
      'value' => '',
    ),
    array (
      'tablename' => 'location',
      'field' => 'street',
      'operator' => '',
      'options' => '',
      'value' => '',
    ),
    array (
      'tablename' => 'location',
      'field' => 'city',
      'operator' => '',
      'options' => '',
      'value' => '',
    ),
    array (
      'tablename' => 'location',
      'field' => 'province',
      'operator' => '',
      'options' => '',
      'value' => '',
    ),
    array (
      'tablename' => 'location',
      'field' => 'postal_code',
      'operator' => '',
      'options' => '',
      'value' => '',
    ),
    array (
      'tablename' => 'location',
      'field' => 'country',
      'operator' => '=',
      'options' => '',
      'value' => 'us',
    ),
    
  );

  $view->exposed_filter = array (
    array (
      'tablename' => 'location',
      'field' => 'city',
      'label' => t('City:'),
      'optional' => 1,
      'is_default' => 0,
      'single' => 1,
      'position' => 0,
    ),
    array (
      'tablename' => 'location',
      'field' => 'province',
      'label' => t('Province:'),
      'optional' => 1,
      'is_default' => 0,
      'single' => 1,
      'position' => 0,
    ),
    array (
      'tablename' => 'location',
      'field' => 'country',
      'label' => t('Country:'),
      'optional' => 0,
      'is_default' => 0,
      'single' => 1,
      'position' => 0,
    ),
  );
  $view->requires = array(node, location);
  $views[$view->name] = $view;


  $view = new stdClass();
  $view->name = 'location_directory';
  $view->description = 'Location directory filtered by arguments in the url.';
  $view->disabled = TRUE;
  $view->access = array ();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'location/directory';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '10';
  $view->menu = TRUE;
  $view->menu_title = 'Locations';
  $view->menu_tab = FALSE;
  $view->menu_tab_default = FALSE;
  $view->menu_weight = '';
  $view->sort = array (
  );
  $view->argument = array (
    array (
      'type' => 'country',
      'argdefault' => '6',
      'title' => t('Country'),
      'options' => '',
    ),
    array (
      'type' => 'province',
      'argdefault' => '6',
      'title' => t('State'),
      'options' => '',
    ),
    array (
      'type' => 'city',
      'argdefault' => '6',
      'title' => t('City'),
      'options' => '1',
    ),
  );
  $view->field = array (
    array (
      'tablename' => 'node',
      'field' => 'title',
      'label' => t('Title:'),
      'handler' => 'views_handler_field_nodelink',
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'name',
      'label' => t('Name:'),
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'street',
      'label' => t('Street:'),
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'additional',
      'label' => t('Additional:'),
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'city',
      'label' => t('City:'),
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'province',
      'label' => t('Province:'),
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'postal_code',
      'label' => t('Postal Code:'),
      'sortable' => '1',
    ),
    array (
      'tablename' => 'location',
      'field' => 'country',
      'label' => 'Country:',
      'sortable' => '1',
    ),
  );
  $view->filter = array (
    array (
      'tablename' => 'node',
      'field' => 'status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
    ),
    array (
      'tablename' => 'node',
      'field' => 'type',
      'operator' => 'OR',
      'options' => '',
      'value' => $location_node_types,
    ),
  );
  $view->exposed_filter = array ();
  $view->requires = array(node, location);
  $views[$view->name] = $view;

  return $views;
}

function location_views_arguments() {
  $arguments = array(
    'city' => array(
      'name' => t('Location: City'),
      'handler' => 'location_views_handler_arg_city',
      'option' => 'string',
      'help' => t('The node type argument allows users to filter a view by specifying the city. Set the option to the number of characters to use in summaries, using 0 for full name; use 1 for an A/B/C style directory of cities.'),
    ),
    'province' => array(
      'name' => t('Location: Province'),
      'handler' => 'location_views_handler_arg_province',
      'help' => t('The node type argument allows users to filter a view by specifying the province.'),
    ),
    'country' => array(
      'name' => t('Location: Country'),
      'handler' => 'location_views_handler_arg_country',
      'help' => t('The node type argument allows users to filter a view by specifying the country.'),
    ));
    return $arguments;
}

function location_views_handler_arg_city($op, &$query, $argtype, $arg = '') {
  switch($op) {
  case 'summary':
      
      // if a length option has been provided, display only the $len left letters of the name
      $len = intval($arg);
      $query->ensure_table('location', true);
      $fieldinfo['field'] = ($len <= 0 ? "location.city" : $fieldinfo['field'] = "LEFT(location.city, $len)");
      $fieldinfo['fieldname'] = 'city';
      return $fieldinfo;
      break;
    case 'sort':
      $query->add_orderby('node', 'title', $argtype);
      break;
    case 'filter':
      $query->ensure_table('location');
      $query->add_field('city', 'location');

      // adjust the search based on whether you are looking for the full city name or the first $len letters
      $len = intval($argtype['options']);
      if ($len <= 0) {
        $query->add_where("location.city = '%s'", $arg);
      } else {
        $query->add_where("LEFT(location.city, $len) = '%s'", $arg);
      }
      break;
    case 'link':
      // if using first letter directory, use strtoupper on the link
      if ($len) {
        return l(strtoupper($query->city), "$arg/$query->city");
      } else {
        return l($query->city, "$arg/$query->city");
      }
    case 'title':
      return $query;
  }
}

function location_views_handler_arg_province($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->ensure_table('location', true);
      $fieldinfo['field'] = "location.province";
      $fieldinfo['fieldname'] = 'province';
      return $fieldinfo;
      break;
    case 'sort':
      $query->add_orderby('node', 'title', $argtype);
      break;
    case 'filter':
      $query->ensure_table('location');
      $query->add_field('province', 'location');
      $query->add_where("location.province = '%s'", $arg);
      break;
    case 'link':
      return l(strtoupper($query->province), "$arg/$query->province");
    case 'title':
      return $query;
  }
}

function location_views_handler_arg_country($op, &$query, $argtype, $arg = '') {

  $all_countries=_location_get_iso3166_list();
  $country_name = is_object($query) ? $all_countries[$query->country] : $all_countries[$query];

  switch($op) {
    case 'summary':
      $query->ensure_table('location', true);
      $fieldinfo['field'] = "location.country";
      $fieldinfo['fieldname'] = 'country';
      return $fieldinfo;
      break;
    case 'sort':
      $query->add_orderby('node', 'title', $argtype);
      break;
    case 'filter':
      $query->ensure_table('location');
      $query->add_field('country', 'location');

      $query->add_where("location.country = '%s'", $arg);
      break;
    case 'link':
      return l($country_name, "$arg/$query->country");
    case 'title':
      return $country_name;
  }
}

/**
 * A list of options to be used in = queries
 */
function location_handler_operator_eq() {
  return array('' => t('<All>'), '=' => t('='), '!=' => t('not ='));
}

/*
 * Custom filter for = queries
 */
function location_handler_filter_eq($op, $filter, $filterinfo, &$query) {
  switch($filter[value]) {
    case(''):
      return;
      break;
  }
  switch($filter['operator']) {
    case (''):
      return;
      break;
  }
  switch($filterinfo['field']) {
    case ('province'):
      $filter['value'] = location_form2api(array('province' => $filter['value']));
      $filter['value'] = $filter['value']['province'];
      break;
  }
  $query->ensure_table('location');
  $query->add_where("$filterinfo[table].$filterinfo[field] $filter[operator] '$filter[value]'");
}

/*
 * Format complete address as a single field.
 */
function location_views_field_handler_address($fieldinfo, $fielddata, $value, $data) {
  
  $location['name'] = $data->location_name;
  $location['street'] = $data->location_street;
  $location['city'] = $data->location_city;
  $location['province'] = $data->location_province;
  $location['country'] = $data->location_country;
  $location['postal_code'] = $data->location_postal_code;
  return theme('location', $location);
}

function location_views_countries() {
  
  $countries = array();
  $provinces = array();
  $configured = location_get_configured_countries();
  $country_list = _location_get_iso3166_list();
  
  foreach ($configured as $country) {
    $countries[$country] = $country_list[$country];
  }
  return $countries;

}

/**
 *  Proximity handling functions
 * 
 *  getting these complicated form elements to work in views was difficult
 *  the best solution seemed to be to return a simple value to the views ui
 *  to make it possible to set up default values, then intervene when the view is
 *  created using hook_form_alter() to insert the map and other complex elements
 *  at runtime. This is done by checking for value = NULL in the handlers. 
 *  Actual values are used to execute the functions at runtime, so the 
 *  presence of a value indicates the function has not been called by views ui
 * 
 */
function location_views_code_input_form($value = NULL) {

 if (!$value) return array();

 return array(
    '#title' => t('from Postal Code'),
    '#type' => 'textfield',
    '#size' => 15,
    );
}

function location_views_proximity_range($default = NULL) {
  
  // if there is no value (coming from views ui) return 'string' to create textfield
  if (!$default) return 'string';

  // otherwise return normal form element
  $form = array(
    '#title' => t('Range'),
    '#type' => 'select',
    '#options' => array(5 => 5, 10 => 10, 25 => 25, 50 => 50, 100 => 100, 250 => 250, 9999 => 'All'),
    '#default_value' => $default,
    '#weight' => -9,
    );
  return $form;
  
}

function location_views_proximity_units($default = NULL) {

  $units = array('miles' => t('miles'), 'km' => t('km'));

  // if there is no value (coming from views ui) return an array to select from
  if (!$default) return $units;

  // otherwise return normal form element
  $form = array(
    '#title' => t('Units'),
    '#type' => 'select',
    '#options' => $units,
    '#default_value' => $default,
    '#weight' => -10,
    );
  return $form;
  
}

/**
 *  Proximity filter
 *  Uses functions and queries created in location.inc and earth.inc and re-factors them to work in views
 */
function location_views_filter_handler_proximity($op, $filter, $filterinfo, &$query) {
  
  $unit     = $_GET['units'] ? $_GET['units'] : $filter['operator'];
  $distance = $_GET['range'] ? $_GET['range'] : $filter['options'];
  
  if ($_SESSION['coordinates']) {

    $lat = $_GET['edit']['gmap_latitude'] ? $_GET['edit']['gmap_latitude'] : $_SESSION['coordinates']['latitude'];
    $lon = $_GET['edit']['gmap_longitude'] ? $_GET['edit']['gmap_longitude'] : $_SESSION['coordinates']['longitude'];
  
  } else {
    
    $zip      = $filter['value'];
    $result   = db_query("SELECT * FROM {zipcodes} WHERE zip='$zip'");
    while ($arr = db_fetch_array($result)) {
      $lat = $arr['latitude'];
      $lon = $arr['longitude'];
    }
  }

  // if no valid value for $lat and $lon is available, exit here
  if (!is_numeric($lat) || !is_numeric($lon)) return;
  
  // adjust the values depending on whether miles or km were chosen
  $divisor = $unit == 'km' ? 1000 : 1609.347;

  $query->ensure_table('location');
  $query->add_field("((". earth_distance_sql($lon, $lat) .") / $divisor) as distance", NULL);
  $query->add_orderby(NULL, 'distance', 'ASC');
  $query->add_where("longitude IS NOT NULL");

  // limit the results if a distance was chosen
  if ($distance <> 9999) {
    $latrange = earth_latitude_range($lon, $lat, ($distance * $divisor));
    $lonrange = earth_longitude_range($lon, $lat, ($distance * $divisor));  
    $query->add_where("latitude > %f AND latitude < %f AND longitude > %f AND longitude < %f", $latrange[0], $latrange[1], $lonrange[0], $lonrange[1]);
  }
}

function location_views_field_handler_distance($fieldinfo, $fielddata, $value, $data) {
  return number_format(round($data->distance, 2), 2) .' '. $distance_unit;
}

/**
 *  Function to create a gmap map form
 */
function location_views_map_input_form($value = NULL) {
  
  $form = array();

  $no_map_form = array(
    '#type' => 'textfield',
    '#size' => 40,
    '#maxlength' => 255,
    );
  
  // just display a textfield in the views ui or if GMap is not enabled
  if (!$value || !module_exist('gmap')) return $no_map_form;
  
  // if we got past the above test, set up the GMap form elements
  // add the selected coordinates to session variables so the handler can access them
  
  if ($value == 'user') {
    $user = $GLOBALS['user'];
    $res=db_query("SELECT * FROM {location} WHERE oid=%d AND type='user'",$user->uid);
    if ($gmap_user = db_fetch_array($res)) {
      $_SESSION['coordinates']['latitude']  = $gmap_user['latitude'];
      $_SESSION['coordinates']['longitude'] = $gmap_user['longitude'];
    }
    $macro = variable_get('gmap_user_map', '[gmap|id=usermap|center=0,30|control=Large|zoom=16|width=100%|height=400px]');
  } 
  else {
    $macro = $value;
    $parts = explode('|', $macro);
    foreach ($parts as $part) {
      if (stristr($part, 'center=')) {
        $val = explode('center=', $part);
        $latlon = array(0, 0);
        if (sizeof($val) == 2) {
          $latlon = explode(',', $val[1]);
        }
      }
    }
    $_SESSION['coordinates']['latitude']  = $latlon[0];
    $_SESSION['coordinates']['longitude'] = $latlon[1];
  }
  
  $form['map'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Map'), 
    '#description' => t('Click on the map to mark the center point for your search, then submit the values.') ,
    );
  $form['map']['gmap_user'] = array(
    '#type'=>'markup',
    '#value'=>''
    );
  $form['coordinates'] = array(
    '#type' => 'fieldset',
    '#title' => t('Coordinates'),
    '#description' => t('The latitude and longitude will automatically be entered here (or you can do it manually).'),
    '#weight' => 10,
    );
  $form['coordinates']['gmap_latitude'] = array(
    '#type' => 'textfield',
    '#id' => 'gmap-latitude',
    '#title' => t('Latitude'),
    '#default_value' => $_GET['edit']['gmap_latitude'] ? $_GET['edit']['gmap_latitude'] : $_SESSION['coordinates']['latitude'],
    '#size' => 30,
    '#maxlength' => 120,
    '#attributes' => array('onchange'=>'gmap_textchange();')
    );
  $form['coordinates']['gmap_longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#default_value' => $_GET['edit']['gmap_longitude'] ? $_GET['edit']['gmap_longitude'] : $_SESSION['coordinates']['longitude'],
    '#size' => 30,
    '#maxlength' => 120,
    '#attributes' => array('onchange'=>'gmap_textchange();')
    );

  $form['map']['gmap_user']['#value'] = gmap_set_location($macro, 
                                         $form['coordinates']['gmap_longitude'],
                                         $form['coordinates']['gmap_latitude']);
  return  $form;

}

function _location_views_proximity_form_alter($form_id, &$form) {
  
  // check for views with exposed filters to see if mapping and proximity filters need adjustment

  if (strstr($form_id, 'views_filters_')) {
    $view = $form['view']['#value'];

    foreach ($view->filter as $key => $filter) {

      // adjust GMap proximity form elements
      if ($filter['field'] == 'location.proximity_map') {
        
        // find the position of the proximity map filter
        foreach ($view->exposed_filter as $delta => $exposed) {
          if ($exposed['field'] == 'location.proximity_map') {
            $expos = $delta;
          }
        }
        
        // need to combine units and range form elements together here because 
        // the views exposed filters theme is going to render this element 
        // before there's any chance to insert another element
        $form['op'. $expos]      = array('units' => location_views_proximity_units($filter['options'])) + array('range' => location_views_proximity_range($filter['options']));

        // rewrite the proximity map filter form elements to generate the google map realtime
        $form['filter'. $expos]  = location_views_map_input_form($filter['value'] ? $filter['value'] : 'user');
        
      // adjust postal code proximity elements
      // use elseif because we don't ever want both the map and the postal code 
      // proximity forms in the same view
      } 
      elseif ($filter['field'] == 'location.proximity') {
        
        // find the position of the proximity map filter
        foreach ($view->exposed_filter as $delta => $exposed) {
          if ($exposed['field'] == 'location.proximity') {
            $expos = $delta;
          }
        }
        
        // need to combine units and range form elements together here because 
        // the views exposed filters theme is going to render this element 
        // before there's any chance to insert another element
        $form['op'. $expos]      = array('units' => location_views_proximity_units($filter['options'])) + array('range' => location_views_proximity_range($filter['options']));

        $form['filter'. $expos] = location_views_code_input_form($filter['value']);  
      }
    }
  }
}

