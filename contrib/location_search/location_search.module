<?php
// $Id$

/**
 * @file
 * Search interface. (The legacy 2.x one.)
 */

/**
 * Implementation of hook_perm().
 */
function location_search_perm() {
  return array('search content by location');
}

/**
 * Implementation of hook_menu().
 */
function location_search_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path'                => 'search/location',
      'title'               => t('By location'),
      'callback'            => 'location_search_view',
      'access'              => user_access('search content by location'),
      'type'                => MENU_LOCAL_TASK,
      'weight'              => 9
    );
    return $items;
  }
}

function location_search_view() {
  $location_params = array(
    //'street' => $_GET['street'],
    //'city' => $_GET['city'],
    //'province' => $_GET['province'],
    'postal_code' => $_GET['postal_code'],
    'country' => $_GET['country'] ? $_GET['country'] : variable_get('location_default_country', 'us')
  );

  $proximity_params = array(
    'distance' => $_GET['distance'],
    'unit' => $_GET['unit'],
  );

  $output .= drupal_get_form('location_search_form', $location_params, $proximity_params);

  if ($_GET['postal_code'] && $_GET['country'] && $_GET['distance'] && $_GET['country']) {
    $output .= location_search_results($location_params, $proximity_params);
  }
  return $output;
}

function location_search_form($location_params = array(), $proximity_params = array()) {
  $form = array();

  $location_search_distance_unit_setting = variable_get('location_search_distance_unit', 0);
  $proximity_suppressed_values = $location_search_distance_unit_setting ? array('unit' => $location_search_distance_unit_setting) : array();
  $form['proximity'] = location_proximity_form($proximity_params, $proximity_suppressed_values);

  $location_suppressed_values = variable_get('location_suppress_country', 0) ? array('country' => variable_get('location_default_country', 'us')) : array();

  $form['location'] = location_form(
    array('postal_code', 'country'),
    $location_params,
    array('postal_code', 'country'),
    $location_suppressed_values,
    '',
    'nearby_postalcodes_bylocation'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );

  $form['#submit'] = array_merge(
    $form['#submit'] ? $form['#submit'] : array(),
    array('location_search_form_submit' => array())
  );


  return $form;
}

/**
 * This function generates a form for doing proximity searches within a certain distance
 * of a specified point.
 *
 * Depending on the context within which this function is called, the search-point can either
 * be user-supplied via the location form that is passed (if one is available) or done within
 * a search-point extracted from a contact table or some other location source specified by
 * the programmer calling this function.
 *
 * @param $prefilled_values
 *   An associative array for prefilled values for the proximity search parameters, where
 *     'distance' => is the prefilled int value to be selected for the distance scalar
 *     'distance_unit' => is 'km' or 'mile'
 *
 * @param $suppressed_values
 *   An associative array for values you wish to force the selection of rather than pre-fill as a default.
 *   The value will be passed as a hidden form input.  The passed values will be taken in as an associative
 *   array where
 *     'distance' => a preselected positive integer for the distance
 *     'distance_unit' => a preselected unit for the distance, one of either 'km' or 'mile'
 *
 * @return
 *   An HTML form (generated by Drupal form functions) that lets users specify proximity search parameters that include distance,
 *   the unit of distance, and a search-point if the optional $location_form parameter is passed.  If one is not passed,
 *   the caller of this function will be assumed to already have one.
 *
 */
function location_proximity_form($prefilled_values = array(), $suppressed_values = array()) {
  $form = array();

  if (in_array('distance', array_keys($suppressed_values))) {
    $form['distance'] = array(
      '#type' => 'hidden',
      '#value' => $suppressed_values['distance']
    );
  }
  else {
    $form['distance'] = array(
      '#type' => 'select',
      '#default_value' => (isset($prefilled_values['distance']) ? $prefilled_values['distance'] : 25),
      '#options' => drupal_map_assoc(array(5, 10, 25, 50, 100, 250)),
    );
  }

  if (in_array('unit', array_keys($suppressed_values))) {
    $form['unit'] = array(
      '#type' => 'hidden',
      '#value' => $suppressed_values['unit']
    );
  }
  else {
    $form['unit'] = array(
      '#type' => 'select',
      '#default_value' => (isset($prefilled_values['unit']) ? $prefilled_values['unit'] : 'mile'),
      '#options' => array('mile' => 'miles', 'km' => 'km'),
    );
  }

  $form['#theme'] = 'location_proximity_form';

  return $form;
}

function location_search_form_validate($form_id, &$form_values) {
  // TODO: Need to offer ability to configure which fields are included in the search form
  // TODO: And need to adjust how fields are validated
  // For now, just require postal code
  if (!$form_values['postal_code']) {
    //form_set_error('postal_code', t('You must include a postal code in your search.'));
  }

  if (!$form_values['country']) {
    //form_set_error('country', t('You much include a country in your search.'));
  }
}

function location_search_form_submit($form_id, &$form_values) {
  /*
  $location_fields = array('street', 'additional', 'province', 'postal_code', 'country');
  foreach ($locations_fields as $field_name) {
    if ($form_values[$field_name]) {
      if ($query_string) {
        $query_string .= '&'. $field_name .'='. $form_values[$field_name];
      }
      else {
        $query_string = $field_name .'='. $form_values[$field_name];
      }
    }
  }

  $query_string = '&distance='. $form_values['distance'] .'&unit='. $unit;
  */
  return array('search/location', 'postal_code='. $form_values['postal_code'] .'&country='. $form_values['country'] .'&distance='. $form_values['distance'] .'&unit='. $form_values['unit']);
}

function theme_location_proximity_form(&$form) {
  $row = array();

  $row[] = array(
    'data' => t('Search within') .' '
  );

  $row[] = array(
    'data' => drupal_render($form['distance']),
    'cellspacing' => 0,
    'cellpadding' => 0
  );

  if ($form['unit']['#type'] == 'select') {
    $row[] = array(
      'data' => drupal_render($form['unit']),
      'cellspacing' => 0,
      'cellpadding' => 0
    );

    $row[] = array(
      'data' => ' '. t('of:'),
      'cellspacing' => 0,
      'cellpadding' => 0
    );
  }
  else {
    $row[] = array(
      'data' => ($form['unit']['#value'] == 'km' ? t('km') : t('miles')) .' '. t('of:') . drupal_render($form['unit']),
      'cellspacing' => 0,
      'cellpadding' => 0
    );
  }

  $output = theme('table', NULL, array($row));
  $output .= drupal_render($form);

  return $output;
}

// @@@ FIX THIS. It doesn't look very efficient...
function location_search_results($location_params, $proximity_params) {
  // First things first: find lat/lon for submitted postal_code
  // TODO: will need to replace be able to get lat/lon of search point for more than just postal_code
  $latlon = location_latlon_rough($location_params);

  if (!$latlon['lat'] || !$latlon['lon']) {
    drupal_set_message(t('No search results; could not determine the location of the submitted postal code.'));
    return '';
  }

  // If the distance parameters did not make sense, return an empty search result set.
  $distance_float = _location_convert_distance_to_meters($proximity_params['distance'], $proximity_params['unit']);

  // Find the pairs of lats and lons that define the corners of a square that is $distance X $distance and centered on $latlon
  $latrange = earth_latitude_range($latlon['lon'], $latlon['lat'], $distance_float);
  $lonrange = earth_longitude_range($latlon['lon'], $latlon['lat'], $distance_float);

  $count_query = 'SELECT COUNT(n.nid) AS count FROM {node} n INNER JOIN {location_instance} i ON n.vid = i.vid INNER JOIN {location} l ON i.lid = l.lid WHERE l.latitude > %f AND l.latitude < %f AND l.longitude > %f AND l.longitude < %f AND '. earth_distance_sql($latlon['lon'], $latlon['lat']) .' < %f';

  $query = 'SELECT n.nid, l.*, '. earth_distance_sql($latlon['lon'], $latlon['lat'], 'l') .' as distance FROM {node} n INNER JOIN {location_instance} i ON n.vid = i.vid INNER JOIN {location} l ON i.lid = l.lid WHERE l.latitude > %f AND l.latitude < %f AND l.longitude > %f AND l.longitude < %f AND '. earth_distance_sql($latlon['lon'], $latlon['lat']) .' < %f GROUP BY n.nid ORDER by distance';

  $query_args = array(
    $latrange[0],
    $latrange[1],
    $lonrange[0],
    $lonrange[1],
    $distance_float
  );

  $pager_count_query = 'SELECT COUNT(DISTINCT nid) AS count FROM {node} n INNER JOIN {location_instance} i ON n.vid = i.vid INNER JOIN {location} l ON i.lid = l.lid WHERE l.latitude > '. $latrange[0] .' AND l.latitude < '. $latrange[1] .' AND l.longitude > '. $lonrange[0] .' AND l.longitude < '. $lonrange[1] .' AND '. earth_distance_sql($latlon['lon'], $latlon['lat']) .' < '. $distance_float;

  $pager_query = 'SELECT n.nid, n.vid, l.*, '. earth_distance_sql($latlon['lon'], $latlon['lat'], 'l') .' AS distance FROM {node} n INNER JOIN {location_instance} i ON n.vid = i.vid INNER JOIN {location} l ON i.lid = l.lid WHERE l.latitude > '. $latrange[0] .' AND l.latitude < '. $latrange[1] .' AND l.longitude > '. $lonrange[0] .' AND l.longitude < '. $lonrange[1] .' AND '. earth_distance_sql($latlon['lon'], $latlon['lat']) .' < '. $distance_float .' GROUP BY n.nid ORDER by distance';

  $result = pager_query(db_rewrite_sql($query), 10, 0, db_rewrite_sql($count_query), $query_args);

  $result_count = db_result(db_query(db_rewrite_sql($count_query), $query_args));

  if (!$result_count) {
    $output = theme('box', t('Your search yielded no results.'), '');
  }
  else {
    $results_offset = isset($_GET['from']) ? $_GET['from'] : 0;

    $page_count = db_num_rows($result);

    $output = '<p>'. t('Displaying results %a - %b of %count for search on %c', array('%a' => $results_offset + 1, '%b' => $results_offset + $page_count, '%count' => $result_count, '%c' => filter_xss($_GET['postal_code']))) .'</p>';

    while ($row = db_fetch_object($result)) {

      $extra = array();
      unset($location_line);
      if ($row->postal_code || $row->city) {
        $location_line = t('Local to ');
        if ($row->postal_code && $row->city) {
          if ($row->postal_code) {
            $location_line .= $row->postal_code;
          }

          if ($row->postal_code && $row->city) {
            $location_line .= ' ('. $row->city;
            $location_line .= $row->province ? ', '. $row->province : '';
            $location_line .= ')';
          }
          elseif ($row->city) {
            $location_line .= $row->city . ($row->province ? ', '. $row->province : '');
          }
        }
      }

      if ($location_line) {
        $extra['location'] = $location_line;
      }

      if (($row->postal_code == $location_params['postal_code'] && $row->country == $location_params['country']) ||
          ($row->distance < 10)) {
        $extra['distance'] = t('Result is <strong>also from %postal_code</strong>', array('%postal_code' => $location_params['postal_code']));
      }
      else {
        $adjusted_distance = round($row->distance / (($proximity_params['unit'] == 'km') ? 1000.0 : 1609.347), 1);

        if ($adjusted_distance != 1) {
          $distance_unit = ($edit['distance_unit'] == 'km') ? t('km') : t('miles');
        }
        else {
          $distance_unit = ($edit['distance_unit'] == 'km') ? t('km') : t('mile');
        }
        $extra['distance'] = t('Approximately %distance %distanceunit from <strong>%location</strong> ', array('%distance' => round($adjusted_distance, 1), '%distanceunit' => $distance_unit, '%location' => $location_params['postal_code']));
      }

      $node = node_load($row->nid);

      $output .= theme(
        'search_item',
        array(
          'link' => url('node/'. $row->nid),
          'title' => $node->title,
          'type' => $node->type,
          'user' => db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $node->uid)),
          'date' => $node->created,
          'snippet' => $row->teaser,
          'extra' => $extra
        ),
        'node'
      );

    }
    $output .= theme('pager');
  }
  return $output;
}

function theme_location_search_form(&$form) {
  $row = array();

  $row[] = array(
    'data' => drupal_render($form['proximity'])
  );

  $row[] = array(
    'data' => drupal_render($form['location'])
  );

  $output = theme('table', NULL, array($row), array('class' => 'location-search-form-table'));
  $output .= drupal_render($form);

  return $output;
}
