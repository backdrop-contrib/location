<?php
// $Id$

/**
 * @file
 * Location saving test.
 */

require_once drupal_get_path('module', 'location') . '/tests/location_testcase.php';

class CowInstanceTest extends LocationTestCase {
  function getInfo() {
    return array(
      'name' => t('Location Copy on Write checks'),
      'description' => t('Test corner cases of the copy on write mechanism.'),
      'group' => t('Location'),
    );
  }

  function setUp() {
    parent::setUp('location', 'devel');
    $web_admin = $this->drupalCreateUser(array('administer nodes', 'submit latitude/longitude', 'administer site configuration', 'access administration pages', 'administer content types'));
    $this->drupalLogin($web_admin);
  }

  function testCreateLocation() {
    $settings = array();
    $location_type = $this->addLocationContentType($settings);

    $location1_name = $this->randomName();

    $node = $this->drupalCreateNode(array(
      'type' => $location_type,
      'locations' => array(
        0 => array(
          'name' => $location1_name,
          'location_settings' => $settings,
        ),
      ),
    ));

    // Reload the node.
    $node2 = node_load($node->nid, NULL, TRUE);

    $this->assertEqual($location1_name, $node2->locations[0]['name'], t('Testing basic save/load'));
  }

  function testMultipleLocationOnSingleNode() {
    $settings = array();
    $location_type = $this->addLocationContentType($settings, array('multiple' => array('max' => 3, 'add' => 3)));

    $location1_name = $this->randomName();
    $location2_name = $this->randomName();
    $location3_name = $this->randomName();

    $node = $this->drupalCreateNode(array(
      'type' => $location_type,
      'locations' => array(
        0 => array(
          'name' => $location1_name,
          'location_settings' => $settings,
        ),
        1 => array(
          'name' => $location2_name,
          'location_settings' => $settings,
        ),
        2 => array(
          'name' => $location3_name,
          'location_settings' => $settings,
        ),
      ),
    ));

    // Reload the node.
    $node2 = node_load($node->nid, NULL, TRUE);

    $this->assertEqual($location1_name, $node2->locations[0]['name'], t('Testing multi location 1/3'));
    $this->assertEqual($location2_name, $node2->locations[1]['name'], t('Testing multi location 2/3'));
    $this->assertEqual($location3_name, $node2->locations[2]['name'], t('Testing multi location 3/3'));
    $this->assertNotEqual($node2->locations[0]['lid'], $node2->locations[1]['lid'], t('Ensuring location id uniqueness'));
    $this->assertNotEqual($node2->locations[1]['lid'], $node2->locations[2]['lid'], t('Ensuring location id uniqueness'));
    $this->assertNotEqual($node2->locations[2]['lid'], $node2->locations[0]['lid'], t('Ensuring location id uniqueness'));
  }

}
