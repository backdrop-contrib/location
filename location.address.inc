<?php
/**
 * $Id$
 * @author Location Dev Team
 * @file location.address.inc
 * An implementation of a universal API for location manipulation.  Provides functions for
 * postal_code proximity searching, deep-linking into online mapping services.  Currently,
 * some options are configured through an interface provided by location.module.
 */

/**
 * Generates a Drupal HTML form for collecting locationes.
 *
 * @param $fields
 * Array. Values where each value is one of 'street', 'city',
 * 'province', 'postal_code', or 'country'. The presence of
 * values in this array determines which fields will be served
 * in the location form generated by a call to this function.
 * If this array is empty, all fields are generated.
 * @param $prefilled
 * Array.
 * -> Each key is one of the location fields: 'street', 'additional',
 *  'city', 'province', 'postal_code', 'country'
 * -> Each value is a prefilled value for the given field.
 * @param $required_fields
 * An array of values that are required.  Each string can be one of
 * 'street', 'city', 'postal_code', 'province', or 'country'. The
 * presence of values in this array determines which fields will be
 * marked as 'required'.  Validation (i.e., making sure a required
 * value is actually filled in is the responsibility of the caller)
 * @param $suppressed
 * An array of values that are to be automatically filled and hidden
 * from user view.  These will be indicated in this associative array
 * with the following possibilities for keys:
 *   'province' => The standard province value as defined keyed by the
 *      country specific file (e.g., for US states, its the capitalized
 *      two letter abbreviation.
 *   'country' => The lower-case two letter ISO code for the country
 *      being assumed.
 * @param $description
 * A text description of specifically what location is being
 * collected by the form to be served.
 * @param $form_name
 * An additional parameter to help prevent HTML input name collisions.
 * If the caller is using this function to generate more than 1 location
 * form on a page, then the generated name for each HTML input's "name"
 * attribute will go by the value supplied for $form_name.  This parameter
 * is defaulted to 'location'. For example, if $form_name == 'xyz' and
 * there is a 'street' field in the form to be served, the "name" attribute
 * for the HTML <input> will be "edit[xyz][street]"
 * @param $function
 * A string that tells _location_address_form() which location API function will be
 * using the location submitted via the generated form.  For example, if
 * $function == 'latlon_rough', then the returned location_address_form (if it includes
 * a country field) will only generate a list of countries in the HTML select
 * for which function _location_latlon_rough() is supported. To figure out
 * which countries these are, we check to see which of the configured
 * countries have existing functions to support the call.  In this case,
 * we would check to see if there existed a function called "__location_latlon_rough_us()"
 * before listing the United States in the HTML SELECT for the generated
 * location form.  $function is defaulted to NULL. If $function is NULL,
 * the HTML SELECT that is generated will list all countries.
 *
 * @return
 *   An location form based on the parameters specified.  If the $fields array is empty, then the
 *   function returns a form in which all possible fields are served as optional form items.
 *
 * @ingroup form
 *
 * EXAMPLES:
 *
 *    -> The following call returns a form that only contains fields for a postal_code and country where
 *       the postal_code is required:
 *            ---
 *            $form = _location_address_form(array('postal_code', 'country'), array(), array('postal_code', 'country'), 'Permanent location')
 *            ---
 *       The form returned by this call is generated with calls to Drupal's 'form_' functions:
 *
 *            $form  = form_textfield('Postal Code', 'location][postal_code', '', 64, 64, NULL, NULL, TRUE);
 *       -------------------------------------------------------------------------------------------------
 *    -> The following call returns a form that contains fields for a street, province, and postal_code,
 *       but the street, city, and province fields are optional while postal_code is required:
 *            ---
 *            $form = _location_address_form(array('street', 'city', 'province', 'postal_code'), array(), array('postal_code'));
 *            ---
 *    -> The form returned by this call is generated with the following calls to Drupal's 'form_' functions:
 *
 *            $form  = form_textfield('Street', 'location][street', '', 64, 64);
 *            $form .= form_textfield('Additional', 'location][additional', '', 64, 64);
 *            // The 'Additional' field is always and only generated when 'street' is specified as one of the fields.
 *            // The 'Additional' field is always optional whether or not 'Street' is required.
 *            $form .= form_textfield('City', 'location][city', '', 64, 64);
 *            $form .= _location_province_address_form(); // defined below
 *            $form .= form_textfield('Postal Code', 'location][postal_code', '', 64, 64, NULL, NULL, TRUE);
 *        ------------------------------------------------------------------------------------------------
 *    For the following examples, assume we have the following two locationes:
 *       (1) $location_a = ('street' => '2010 Broadway St', 'city' => 'Redwood City', 'province' => 'CA', 'postal_code' => '94063', 'country' => 'us');
 *       (2) $location_b = ('street' => '2010 Broadway St', 'city' => 'Redwood City', 'province' => 'us-CA', 'postal_code' => '94063', 'country' => 'us');
 *     -> The following calls return the exact same form that contains fields for a street, province, postal_code, where prefilled
 *        values are submitted to the form.
 *
 *            $form = _location_address_form(array('street', 'city', 'province', 'postal_code', 'country'), $location_b, array('street', 'city', 'province', 'postal_code', 'country'), '', 'home_location');
 *
 *            $form = _location_address_form(array('street', 'city', 'province', 'postal_code', 'country'), _location_api2form($location_a), array('street', 'city', 'province', 'postal_code', 'country'), '', 'home_location');
 *
 *     -> The form returned by these call is ultimately generated with the following calls to Drupal's 'form_' functions:
 *
 *            $form  = textfield('Street', 'home_location][street', '2010 Broadway St.', 64, 64, NULL, NULL, TRUE);
 *            $form .= textfield('Additional', 'home_location][additional', 'Attn: Ankur Rishi', 64, 64, NULL, NULL, TRUE);
 *            $form .= textfield('City', 'home_location][city', 'Redwood City', 64, 64, NULL, NULL, TRUE);
 *            $form .= _location_province_address_form(TRUE, 'us-CA', 'home_location');
 *            $form .= textfield('Postal Code', 'home_location][postal_code', '94063', 64, 64, NULL, NULL, TRUE);
 *            $form .= _location_country_address_form(TRUE, 'us', 'home_location');
 *
 *        Note that in both cases, the first and third argument can take the same array since all the fields are being required.
 */
function _location_address_form($fields = array(), $prefilled = array(), $required_fields = array(), $suppressed = array(), $description = '', $function = NULL) {
  // If no field was specified, use all
  if (empty($fields)) {
    $fields = array('name', 'street', 'city', 'province', 'postal_code', 'country');
  }

  // Invert the index and values
  array_unshift($fields, '--');
  $fields = array_flip($fields);

  $form = array();

  // If its a existing location, save the Location ID
  // for further processing
  if (!empty($prefilled['lid'])) {
    $form['lid'] = array(
      '#type'   => 'hidden',
      '#value'  => $prefilled['lid']
    );
  }

  // Add the Description, if any
  $form['description'] = array(
    '#type'   => 'markup',
    '#value'  => $description
  );

  // Adds the Location Name (Home, Office, Rio de Janeiro...)
  if (!empty($fields['name'])) {
    $form['name'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Location name'),
      '#default_value'  => isset($prefilled['name']) ? $prefilled['name'] : '',
      '#size'           => 64,
      '#maxlength'      => 64,
      '#description'    => t('e.g. a place of business, venue, meeting point'),
      '#attributes'     => NULL,
      '#required'       => in_array('name', $required_fields)
    );
  }

  // Adds the Country
  if (!empty($fields['country'])) {
    if (in_array('country', array_keys($suppressed))) {
      $form['country'] = array(
        '#type'   => 'hidden',
        '#value'  => $suppressed['country']
      );
    }
    else {
      $form['country'] = _location_country_address_form(
        isset($prefilled['country']) ? $prefilled['country'] : '',
        in_array('country', $required_fields), $function);
    }
  }

  // Adds the Province field
  if (!empty($fields['province'])) {
    if (in_array('province', array_keys($suppressed))) {
      $form['province'] = array(
        '#type'             => 'hidden',
        '#value'            => $suppressed['province']
      );
    }
    else {
      $form['province'] = array(
        '#autocomplete_path'  => 'admin/settings/location/autocomplete',
        '#default_value'      => isset($prefilled['province']) ? $prefilled['province'] : '',
        '#maxlength'          => 64,
        '#required'           => in_array('province', $required_fields),
        '#size'               => 30,
        '#title'              => t('State / Province'),
        '#type'               => 'textfield',
      );
    }
  }

  // Adds the City
  if (!empty($fields['city'])) {
    $form['city'] = array(
      '#type'           => 'textfield',
      '#title'          => t('City'),
      '#default_value'  => isset($prefilled['city']) ? $prefilled['city'] : '',
      '#size'           => 64,
      '#maxlength'      => 64,
      '#description'    => NULL,
      '#attributes'     => NULL,
      '#required'       => in_array('city', $required_fields)
    );
  }

  // Adds the Streets and the Additional fields
  if (!empty($fields['street'])) {
    $form['street'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Street'),
      '#default_value'  => isset($prefilled['street']) ? $prefilled['street'] : '',
      '#size'           => 64,
      '#maxlength'      => 64,
      '#required'       => in_array('street', $required_fields)
    );
    $form['additional'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Additional'),
      '#default_value'  => isset($prefilled['additional']) ? $prefilled['additional'] : '',
      '#size'           => 64,
      '#maxlength'      => 64
    );
  }

  // Adds the Postal Code
  if (!empty($fields['postal_code'])) {
    $form['postal_code'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Postal code'),
      '#default_value'  => isset($prefilled['postal_code']) ? $prefilled['postal_code'] : '',
      '#size'           => 16,
      '#maxlength'      => 16,
      '#required'       => in_array('postal_code', $required_fields)
    );
  }

  // Add the submit button
  if (1) {
    if (!empty($prefilled['lid'])) {
      $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => t('Update address')
        );
    }
    else {
      $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => t('Create new address')
      );
    }
  }

  $form['#theme'] = 'location_address_form';

  return $form;
}

/**
 * Validate an address being saved
 */
function _location_address_form_validate($form_id, $form) {
  // Check if its a valid province
  if ($states = _location_province_get($form['country']) and
      empty($states[$form['province']])) {
    form_set_error('province', t('Invalid state. Try to use the state code.'));
  }
}

function _location_address_form_submit($form_id, $form) {
  $edit = _location_form2api($form);

  // Get the Latitude and Longitude data
  if ($latlon = location_latlon_exact($edit)) {
    $edit['source'] = LOCATION_LATLON_GEOCODED_EXACT;
    $edit['lat'] = $latlon['lat'];
    $edit['lon'] = $latlon['lon'];
  }
  elseif ($latlon = _location_latlon_postalcode($edit)) {
    $edit['source'] = LOCATION_LATLON_GEOCODED_APPROX;
    $edit['lat'] = $latlon['lat'];
    $edit['lon'] = $latlon['lon'];
  }
  else {
    $edit['source'] = LOCATION_LATLON_UNDEFINED;
    unset($edit['lat']);
    unset($edit['lon']);
  }

  global $user;
  _location_save($edit, $user, 'user');
//   unset($edit);
}

/**
 * Create a single line address.
 *
 * @param $location
 *   Array. The address parts
 * @return
 *   String. The single line address
 */
function _location_address_singleline($location) {
  // Check if its a valied address
  if (empty($location)) {
    return '';
  }

  $address = '';

  // Add the streets
  if (!empty($location['street'])) {
    $address .= $location['street'];
  }

  // Add the city
  if (!empty($location['city'])) {
    if (!empty($location['street'])) {
      $address .= ', ';
    }
    $address .= $location['city'];
  }

  // Add the state / province
  if (!empty($location['province'])) {
    if (!empty($location['street']) or !empty($location['city'])) {
      $address .= ', ';
    }
    $address .= $location['province'];
  }

  // Add the Postal code
  if (!empty($location['postal_code'])) {
    if (!empty($address)) {
      $address .= ' ';
    }
    $address .= $location['postal_code'];
  }

  // Add the country
  if (!empty($location['country'])) {
    $address .= ', '. $location['country'];
  }

  return $address;
}

/**
 * Inverse of _location_form2api()
 *
 * @param $location
 *   Array. that can be passed as the $location parameter to the location API.
 *
 * @return
 *   Array. with the same values modified so that the array can be passed
 *   as the $prefilled parameter to _location_api2form()
 *
 *   Meant to take the standard location array format used by the public API
 *   (minus the form generating functions) and convert them into values that
 *   can be used by _location_address_form() to fill in the prefilled values.
 */
function _location_api2form($location = array()) {
  return (array) $location;
}

/**
 * @param $location
 *   An associative array that has been submitted by an HTML form generated by _location_address_form().
 *
 * @return
 *   An associative array in which the submitted values are modified to pass to the location API
 *   as the $location parameter (excepting _location_address_form()).
 *
 *   This means changing the province field to remove the country code and dash.
 *   For example: California is served by the key 'us-CA' in the location form and this is what is passed when it is
 *                submitted through a form generated by _location_address_form().
 *
 *                This is changed to 'CA' in the returned array.
 */
function _location_form2api($location = array()) {
  $translated = array();
  foreach ($location as $key => $value) {
    $translated[$key] = trim($value);
  }
  return $translated;
}

/**
 * Theme the Location Address form
 *
 * @param &$form
 *   Array. The form structure
 * @ingroup themeable
 */
function theme_location_address_form(&$form) {
  // If the country and state fields are present,
  // enable the extra JS
  if (!empty($form['province'])
      and $form['province']['#type'] != 'hidden'
      and $form['country']['#type'] != 'hidden') {
    drupal_add_js(drupal_get_path('module', 'location') .'/location.js');
  }

  // The required field notation
  $req_str = '<span class="form-required" title="'. t('This field is required.') .'">*</span>';

  foreach (element_children($form) as $field_name) {
    $col = array();
    if ($form[$field_name]['#type'] == 'markup') {
      $col[] = array('data' => $form[$field_name]['#value'], 'colspan' => 2);
    }
    elseif ($form[$field_name]['#type'] != 'hidden') {
      $required = !empty($form[$field_name]['#required']) ? $req_str : '';

      // Check if the element has a title
      if (!empty($form[$field_name]['#title'])) {
        $col[] = array(
          'align' => 'right',
          'data'  => '<div class="form-item"><label'. ($form[$field_name]['#id'] ?
          ' for="'. $form[$field_name]['#id'] .'" ' : '') .'>'.
          filter_xss_admin($form[$field_name]['#title']) .": $required</label></div>"
        );
        unset($form[$field_name]['#title']);
      }
      else {
        $col[] = array('');
      }

      // The field itselt
      $col[] = array(
        'align' => 'left',
        'data' => drupal_render($form[$field_name])
      );

      $rows[] = array(
        'data'  => $col,
        'class' => 'odd'
      );
    }
  }

  $output = theme('table', NULL, $rows);
  $output .= drupal_render($form);

  return $output;
}
